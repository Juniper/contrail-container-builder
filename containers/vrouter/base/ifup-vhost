#!/bin/bash
# Network Interface Configuration System
# Copyright (c) 1996-2014 Red Hat, Inc. all rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License, version 2,
# as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

. /etc/init.d/functions

cd /etc/sysconfig/network-scripts
. ./network-functions

[ -f ../network ] && . ../network

CONFIG=${1}

need_config "${CONFIG}"

source_config

if [ "${BOOTPROTO}" = "bootp" -o "${BOOTPROTO}" = "dhcp" ]; then
    DYNCONFIG=true
fi

function pkt_setup () {
    for f in /sys/class/net/$1/queues/rx-*
    do
        q="$(echo $f | cut -d '-' -f2)"
        r=$(($q%32))
        s=$(($q/32))
        ((mask=1<<$r))
        str=(`printf "%x" $mask`)
        if [ $s -gt 0 ]; then
            for ((i=0; i < $s; i++))
            do
                str+=,00000000
            done
        fi
        echo $str > $f/rps_cpus
    done
    ifconfig $1 up
}

function insert_vrouter(){
    lsmod |grep vrouter 2&>1 > /dev/null
    if [ $? -ne 0 ];then
      modprobe vrouter
    fi
    ifup ${BIND_INT}
    if [ -f /sys/class/net/pkt1/queues/rx-0/rps_cpus ]; then
        pkt_setup pkt1
    fi
    if [ -f /sys/class/net/pkt2/queues/rx-0/rps_cpus ]; then
        pkt_setup pkt2
    fi
    if [ -f /sys/class/net/pkt3/queues/rx-0/rps_cpus ]; then
        pkt_setup pkt3
    fi
    BIND_INT_MAC=`cat /sys/class/net/${BIND_INT}/address`
    vif --list |grep vhost0  2&>1 > /dev/null
    if [ $? -ne 0 ]; then
        /bin/vif --create vhost0 --mac ${BIND_INT_MAC}
        /bin/vif --add ${BIND_INT} --mac ${BIND_INT_MAC} --vrf 0 --vhost-phys --type physical
        /bin/vif --add vhost0 --mac ${BIND_INT_MAC} --vrf 0 --type vhost --xconnect ${BIND_INT}
    fi
}

if [[ "${TYPE}" == "kernel_mode" && ! `ifconfig vhost0` ]]; then
    insert_vrouter
fi

if [ -n "${MACADDR}" ]; then
   ip link set dev ${DEVICE} address ${MACADDR}
fi
if [ -n "${MTU}" ]; then
   ip link set dev ${DEVICE} mtu ${MTU}
fi

if [ -n "${DYNCONFIG}" ] && [ -x /sbin/dhclient ]; then
    if [[ "${PERSISTENT_DHCLIENT}" =  [yY1]* ]]; then
       ONESHOT="";
    else
       ONESHOT="-1";
    fi;
    generate_config_file_name
    generate_lease_file_name
    DHCLIENTARGS="${DHCLIENTARGS} -H ${DHCP_HOSTNAME:-${HOSTNAME%%.*}} ${ONESHOT} -q ${DHCLIENTCONF} -lf ${LEASEFILE} -pf /var/run/dhclient-${DEVICE}.pid"
    echo
    echo -n $"Determining IP information for ${DEVICE}..."
    if [[ "${PERSISTENT_DHCLIENT}" !=  [yY1]* ]] && check_link_down ${DEVICE}; then
        echo $" failed; no link present.  Check cable?"
        exit 1
    fi

    ethtool_set

    if /sbin/dhclient ${DHCLIENTARGS} ${DEVICE} ; then
        echo $" done."
        dhcpipv4="good"
    else
        echo $" failed."
        if [[ "${IPV4_FAILURE_FATAL}"  = [Yy1]* ]] ; then
            exit 1
        fi
        if [[ "$IPV6INIT" = [nN0]* || "$DHCPV6C" != [yY1]* ]] ; then
            exit 1
        fi
        net_log "Unable to obtain IPv4 DHCP address ${DEVICE}." warning
    fi
# end dynamic device configuration
else

    if [ -z "${IPADDR}" -a -z "${IPADDR0}" -a -z "${IPADDR1}" -a -z "${IPADDR2}" ]; then
         # enable device without IP, useful for e.g. PPPoE
         ip link set dev ${REALDEVICE} up
         ethtool_set
         [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}
    else

    expand_config
    
    [ -n "${ARP}" ] && \
        ip link set dev ${REALDEVICE} $(toggle_value arp $ARP)
    
    if ! ip link set dev ${REALDEVICE} up ; then
        net_log $"Failed to bring up ${DEVICE}."
        exit 1
    fi
    
    ethtool_set

    [ -n "${LINKDELAY}" ] && /bin/sleep ${LINKDELAY}
    
    if [ "${DEVICE}" = "lo" ]; then
        SCOPE="scope host"
    else
        SCOPE=${SCOPE:-}
    fi

    if [ -n "$SRCADDR" ]; then
       SRC="src $SRCADDR"
    else
       SRC=
    fi
    
    # set IP address(es)
    for idx in {0..256} ; do
        if [ -z "${ipaddr[$idx]}" ]; then
            break
        fi
    
        if ! LC_ALL=C ip addr ls ${REALDEVICE} | LC_ALL=C grep -q "${ipaddr[$idx]}/${prefix[$idx]}" ; then
            if [ "${REALDEVICE}" != "lo" ] && [ "${arpcheck[$idx]}" != "no" ] ; then
                    /sbin/arping -q -c 2 -w 3 -D -I ${REALDEVICE} ${ipaddr[$idx]}
                    if [ $? = 1 ]; then
                        net_log $"Error, some other host already uses address ${ipaddr[$idx]}."
                        exit 1
                    fi
            fi
    
            if ! ip addr add ${ipaddr[$idx]}/${prefix[$idx]} \
              brd ${broadcast[$idx]:-+} dev ${REALDEVICE} ${SCOPE} label ${DEVICE}; then
                net_log $"Error adding address ${ipaddr[$idx]} for ${DEVICE}."
            fi
        fi
    
        if [ -n "$SRCADDR" ]; then
               sysctl -w "net.ipv4.conf.${SYSCTLDEVICE}.arp_filter=1" >/dev/null 2>&1
        fi
    
        # update ARP cache of neighboring computers
        if [ "${REALDEVICE}" != "lo" ]; then
          /sbin/arping -q -A -c 1 -I ${REALDEVICE} ${ipaddr[$idx]}
          ( sleep 2;
            /sbin/arping -q -U -c 1 -I ${REALDEVICE} ${ipaddr[$idx]} ) > /dev/null 2>&1 < /dev/null &
        fi
    
        # set lifetime of address to forever
        ip addr change ${ipaddr[$idx]}/${prefix[$idx]} dev ${REALDEVICE} valid_lft forever preferred_lft forever
    done
    
    # Set a default route.
    if [ "${DEFROUTE}" != "no" ] && [ -z "${GATEWAYDEV}" -o "${GATEWAYDEV}" = "${REALDEVICE}" ]; then
        # set up default gateway. replace if one already exists
        if [ -n "${GATEWAY}" ] && [ "$(ipcalc --network ${GATEWAY} ${netmask[0]} 2>/dev/null)" = "NETWORK=${NETWORK}" ]; then
            ip route replace default ${METRIC:+metric $METRIC} \
                via ${GATEWAY} ${WINDOW:+window $WINDOW} ${SRC} \
                ${GATEWAYDEV:+dev $GATEWAYDEV} ||
                        net_log $"Error adding default gateway ${GATEWAY} for ${DEVICE}."
        elif [ "${GATEWAYDEV}" = "${DEVICE}" ]; then
            ip route replace default ${METRIC:+metric $METRIC} \
                ${SRC} ${WINDOW:+window $WINDOW} dev ${REALDEVICE} ||
                        net_log $"Error adding default gateway for ${REALDEVICE}."
        fi
    fi
    fi
fi

exec /etc/sysconfig/network-scripts/ifup-post ${CONFIG} ${2}
