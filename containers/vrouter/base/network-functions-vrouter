#!/bin/bash

function load_kernel_module() {
    local module=$1
    shift 1
    local opts=$@
    echo "INFO: load $module kernel module, options='$opts'"
    if ! modprobe -v "$module" $opts ; then
        echo "WARNING: failed to load $module driver"
        return 1
    fi
}

function unload_kernel_module() {
    local module=$1
    lsmod | grep -q "$module" || return
    echo "INFO: wait 0 use-count for $module"
    while [[ "$(lsmod | grep "$module" | awk '{print($3)}')" != '0' ]] ; do
        sleep 1s;
    done
    echo "INFO: unload $module kernel module"
    if ! rmmod $module ; then
        echo "WARNING: Failed to unload $module driver"
        return 1
    fi
}

function convert_bond_policy(){
    local policy=$1
    ## Map Linux values to DPDK
    case "${policy}" in
        "layer2") policy="l2";;
        "layer3+4") policy="l34";;
        "layer2+3") policy="l23";;
        # DPDK 2.0 does not support inner packet hashing
        "encap2+3") policy="l23";;
        "encap3+4") policy="l34";;
    esac
    echo $policy
}

function convert_bond_mode(){
    local mode=$1
    ## Map Linux values to DPDK
    case "${mode}" in
        "balance-rr") mode="0";;
        "active-backup") mode="1";;
        "balance-xor") mode="2";;
        "broadcast") mode="3";;
        "802.3ad") mode="4";;
        "balance-tlb") mode="5";;
        "balance-alb") mode="6";;
	*) mode=${mode};;
    esac
    echo $mode
}

function get_bond_numa() {
    local pci=$1
    local slave_numa=$(cat "/sys/bus/pci/devices/${pci}/numa_node")
    local bond_numa=''
    # DPDK EAL for bond interface interprets -1 as 255
    if [[ -z "${slave_numa}" || "${slave_numa}" -eq -1 ]] ; then
        bond_numa=0
    else
        bond_numa=${slave_numa}
    fi
    echo $bond_numa
}

function get_ifname_by_pci() {
    local pci=$1
    ls "/sys/bus/pci/devices/${pci}/net"
}

function prepare_vif_config() {
    # this is for vif tool
    # in agent container this is re-written by container at latest step
    local type=$1
    local folder_prefix=${2:-''}
    mkdir -p $folder_prefix/etc/contrail
    cat << EOM > $folder_prefix/etc/contrail/contrail-vrouter-agent.conf
[DEFAULT]
platform=$type
EOM
}

function get_iface_mac() {
  local nic=$1
  cat /sys/class/net/${nic}/address
}

function get_addrs_for_nic() {
    local nic=$1
    ip addr show dev $nic | grep "inet" | grep -oP "[0-9a-f\:\.]*/[0-9]* brd [0-9\.]*|[0-9a-f\:\.]*/[0-9]*"
}

function get_iface_mtu() {
    local nic=$1
    cat /sys/class/net/${nic}/mtu
}

# Generate ip address add command
function gen_ip_addr_add_cmd() {
    local from_nic=$1
    local to_nic=$2
    local addrs=`get_addrs_for_nic $from_nic`
    declare line cmd
    while IFS= read -r line ; do
        local addr_to_add=$(echo $line | sed 's/brd/broadcast/')
        if [[ -n $cmd ]]; then
            cmd+=" && "
        fi
        cmd+="ip address add $addr_to_add dev $to_nic"
    done <<< "$addrs"
    echo $cmd
}

function get_dev_routes() {
    local dev=$1
    local routes_list=$(ip route list dev ${dev} | grep -v default)
    if [ -n "$routes_list" ] ; then
        echo "$routes_list"
    fi
    routes_list=$(ip route list dev ${dev} | grep default)
    if [ -n "$routes_list" ] ; then
        echo "$routes_list"
    fi
}

function del_dev_routes() {
    local dev=$1
    local routes_list=$2
    if [ -n "$routes_list" ] ; then
        local route
        while IFS= read -r route ; do
            echo "INFO: ip route del $route dev $dev"
            ip route del $route dev $dev || echo "WARNING: failed to apply ip route del $route dev $dev"
        done < <(echo "$routes_list")
    fi
}

function set_dev_routes() {
    local dev=$1
    local routes_list=$2
    if [ -n "$routes_list" ] ; then
        local route
        while IFS= read -r route ; do
            echo "INFO: ip route replace $route dev $dev"
            ip route replace $route dev $dev || echo "WARNING: failed to apply ip route replace $route dev $dev"
        done < <(echo "$routes_list")
    fi
}

function restore_phys_int() {
    local phys_int="$1"
    local add_ipaddr_cmd="$2"
    local routes="$3"
    local netscript_dir='/etc/sysconfig/network-scripts'
    echo "INFO: restore bind interface $phys_int"
    if [ -d "$netscript_dir" ] ; then
        pushd "$netscript_dir"
        declare i
        for i in $(ls | grep 'contrail\.org\.ifcfg\-' | sed 's/contrail\.org\.ifcfg\-//g') ; do
            echo "INFO: restore ifcfg-$i from contrail.org.ifcfg-$i"
            mv contrail.org.ifcfg-$i ifcfg-$i
            echo "INFO: reinit $i"
            ifdown $i >/dev/null 2>&1
            ifup $i
        done
        popd
    else
        set_dev_routes $phys_int "$routes"
        if [ -n "$add_ipaddr_cmd" ] ; then
            echo "INFO: restore IPs for $phys_int"
            eval "$add_ipaddr_cmd"
        fi
    fi
}

function stop_docker_container() {
    local container=$1
    local signal=$2
    [ -z "$container" ] && { echo "ERROR: container id/name must be provided" && return 1 ; }
    if docker inspect "$container" >/dev/null 2>&1 ; then
        if [ -n "$signal" ] ; then
            echo "INFO: send $signal to the container $container"
            docker kill --signal $signal "$container"
            echo "INFO: wait container $container finishes"
            docker wait "$container"
        fi
    fi
}

function remove_docker_container() {
    local container=$1
    local signal=$2
    if stop_docker_container $container $signal ; then
        echo "INFO: remove the container $container"
        docker rm --force "$container"
    fi
}

function wait_vhost0() {
    local max=${1:-60}
    local pause=${2:-5}
    local i=0
    for (( i=0; i<max; i+=1 )) ; do
        echo "INFO: wait vhost0 to be initilaized... ${i}/${max}"
        if ip addr show dev vhost0 2>/dev/null | grep -q "inet " ; then
            echo "INFO: vhost0 is ready."
            return 0
        fi
        sleep $pause
    done
    echo "INFO: vhost0 is not ready."
    return 1
}

# Get dhcp client for physical interface
# we need this in case of clearing
function get_dhcp_client_pids() {
    local pids=$(ps -A -o pid,cmd | grep dhclient | grep ${1} | grep -v grep | awk '{print $1}')
    echo $pids
}

function kill_dhcp_clients() {
    local phys_int=$1
    local dhcpcl_id=$(get_dhcp_client_pids ${phys_int})
    if [ -n "$dhcpcl_id" ] ; then
        echo "INFO: kill dhclient for $phys_int"
        kill -9 $dhcpcl_id
    fi
}

function prepare_ifcfg() {
    local phys_int=$1
    local bind_type=$2
    local bind_int=$3
    local netscript_dir='/etc/sysconfig/network-scripts'
    if [[ ! -e "${netscript_dir}/ifcfg-${phys_int}" && ! -e "${netscript_dir}/ifcfg-vhost0" ]] ; then
        return 0
    fi
    local ret=0
    echo "INFO: create ifcfg-vhost0 and patch ifcfg-${phys_int}"
    pushd "$netscript_dir"
    if [[ -f route-${phys_int} ]] ; then
        if [[ ! -f contrail.org.route-${phys_int} ]] ; then
            mv route-${phys_int} contrail.org.route-${phys_int}
        fi
        if [[ ! -f route-vhost0 ]] ; then
            sed "s/${phys_int}/vhost0/g" contrail.org.route-${phys_int} > route-vhost0.tmp
            mv route-vhost0.tmp route-vhost0
        fi
    fi
    if [[ -f "ifcfg-${phys_int}" ]] ; then
        if [[ ! -f "contrail.org.ifcfg-${phys_int}" ]] ; then
            /bin/cp -f ifcfg-${phys_int} contrail.org.ifcfg-${phys_int}
        fi
        local bp=$(grep '^BOOTPROTO' "ifcfg-${phys_int}" | cut -s -d '=' -f 2)
        local nm=$(grep '^NM_CONTROLLED' "ifcfg-${phys_int}" | cut -s -d '=' -f 2)
        if [[ "${bp,,}" == 'dhcp' || "${nm,,}" == 'yes' ]] ; then
            ret=1
        fi
        # always recreate ifcfg-${phys_int} becuase cloud-init script restores it on reboot 
        sed -r "/(DEVICE|TYPE|ONBOOT|MACADDR|HWADDR|BONDING|SLAVE|VLAN|MTU|PHYSDEV)/! s/^[^#].*/#commented_by_contrail& /" contrail.org.ifcfg-${phys_int} > ifcfg-${phys_int}.tmp
        echo 'NM_CONTROLLED=no' >> ifcfg-${phys_int}.tmp
        echo 'BOOTPROTO=none' >> ifcfg-${phys_int}.tmp
        mv ifcfg-${phys_int}.tmp ifcfg-${phys_int}
    fi
    if [[ ! -f ifcfg-vhost0 ]] ; then
        sed "s/${phys_int}/vhost0/g" contrail.org.ifcfg-${phys_int} > ifcfg-vhost0.tmp
        sed -ri '/(TYPE|NM_CONTROLLED|MACADDR|HWADDR|BONDING|SLAVE|VLAN|UUID|PHYSDEV)/d' ifcfg-vhost0.tmp
        echo "TYPE=${bind_type}" >> ifcfg-vhost0.tmp
        echo 'NM_CONTROLLED=no' >> ifcfg-vhost0.tmp
        echo "BIND_INT=${bind_int}" >> ifcfg-vhost0.tmp
        mv ifcfg-vhost0.tmp ifcfg-vhost0
    fi
    popd
    return $ret
}
