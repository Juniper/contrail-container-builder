#!/bin/bash

. ./network-functions-vrouter

function is_dpdk_running() {
    netstat -xl | grep -q  dpdk_netlink
}

function wait_dpdk_start() {
    local i=0
    for i in {1..60} ; do
        echo "INFO: wait DPDK agent to run... $i"
        if is_dpdk_running ; then
            return 0
        fi
        sleep 5
    done
    return 1
}

function create_vhost0_dpdk() {
    local phys_int=$1
    local phys_int_mac=$2
    echo "INFO: Creating ${phys_int} interface with mac $phys_int_mac via vif utility..."
    if ! vif --add 0 --mac ${phys_int_mac} --vrf 0 --vhost-phys --type physical --pmd --id 0 ; then
        echo "ERROR: Failed to adding ${phys_int} interface"
        return 1
    fi
    echo "INFO: Adding vhost0 interface with vif utility..."
    if ! vif --add vhost0 --mac ${phys_int_mac} --vrf 0 --type vhost --xconnect 0 --pmd --id 1 ; then
        echo "ERROR: Failed to add vhost0 interface"
        return 1
    fi
    if ! ip link set dev vhost0 up ; then
        echo "ERROR: Failed to up vhost0 interface"
        return 1
    fi
    if ! ip link set dev vhost0 address $phys_int_mac ; then
        echo "ERROR: Failed to set vhost0 address $phys_int_mac"
        return 1
    fi
}

function ifcfg_read_phys_int_mac_pci_dpdk() {
    # in case of running from ifup in tripleo there is no way to read params from system,
    # all of them are to be available from ifcfg-vhost0 (that are passed via env to container)
    declare phys_int phys_int_mac pci
    if [[ -n "$BIND_INT" ]] ; then
        pci=${BIND_INT}
        phys_int='bond0'
        phys_int_mac=${MACADDR}
        local binding_data_dir='/var/run/vrouter'
        if [ -f $binding_data_dir/nic ] ; then
            phys_int=$(cat $binding_data_dir/nic)
            [ -z "$phys_int_mac" ] && phys_int_mac=$(cat $binding_data_dir/${phys_int}_mac)
        else
            [ -z "$BOND_MODE" ] && phys_int=$(get_ifname_by_pci $pci)
            if [ -z "$phys_int_mac" ] ; then
                local _first_int=$phys_int
                if [ -n "$BOND_MODE" ] ; then
                    local _first_pci=$(echo $pci | cut -d ',' -f 1)
                    _first_int=$(get_ifname_by_pci $_first_pci)
                fi
                phys_int_mac=$(get_iface_mac $_first_int)
            fi
        fi
    fi
    echo $phys_int $phys_int_mac $pci
}

function start_dpdk_container() {
    [ -z "$CONTRAIL_VROUTER_AGENT_DPDK_DOCKER_IMAGE" ] && \
        { echo 'ERROR: CONTRAIL_VROUTER_AGENT_DPDK_DOCKER_IMAGE is not provided' && return 1; }

    local env_options="-e AGENT_MODE=$TYPE"
    env_options+=" -e BIND_INT=$BIND_INT"
    [ -n "$BOND_MODE" ] && env_options+=" -e BOND_MODE=$BOND_MODE"
    [ -n "$BOND_POLICY" ] && env_options+=" -e BOND_POLICY=$BOND_POLICY"
    [ -n "$VLAN_ID" ] && env_options+=" -e VLAN_ID=$VLAN_ID"
    [ -n "$DRIVER" ] && env_options+=" -e DPDK_UIO_DRIVER=$DRIVER"
    [ -n "$CPU_LIST" ] && env_options+=" -e CPU_CORE_MASK=$CPU_LIST"
    [ -n "$DPDK_COMMAND_ADDITIONAL_ARGS" ] && env_options+=" -e DPDK_COMMAND_ADDITIONAL_ARGS=$DPDK_COMMAND_ADDITIONAL_ARGS"

    if docker inspect contrail-vrouter-agent-dpdk 2>&1 | grep -io 'status.*running' ; then
        echo "INFO: container contrail-vrouter-agent-dpdk is already up"
        return 0
    fi

    docker run \
        --detach \
        --name contrail-vrouter-agent-dpdk \
        --net host --privileged \
        --restart always \
        -v /dev/:/dev/ \
        -v /etc/sysconfig/network-scripts/:/etc/sysconfig/network-scripts/ \
        -v /lib/modules/:/lib/modules/ \
        -v /var/run/vrouter:/var/run/vrouter \
        -v /var/log/contrail/agent/:/var/log/contrail/ \
        ${env_options} \
        ${CONTRAIL_VROUTER_AGENT_DPDK_DOCKER_IMAGE}
}

function restore_iface_driver() {
    local pci=$1
    local dpdk_drv=$2
    [ -z "$dpdk_drv" ] && return
    local binding_data_dir='/var/run/vrouter'
    [ ! -d "$binding_data_dir" ] && return
    declare i
    for i in ${pci//,/ } ; do
        if [ -f "$binding_data_dir/$i" ] ; then
            local drv=$(awk '/Driver:/{print($2)}' "$binding_data_dir/$i")
            echo "INFO: rebind device $i from $dpdk_drv to driver $drv"
            if [ -e "/sys/bus/pci/drivers/${dpdk_drv}/$i" ] ; then
                echo "INFO: unbind $i from $dpdk_drv"
                echo -n $i > /sys/bus/pci/drivers/${dpdk_drv}/unbind
            fi
            if [ ! -e "/sys/bus/pci/drivers/${drv}/$i" ] ; then
                echo "INFO: bind $i to $drv"
                # NOTE: new_id is not needed because nic is always bind to network on boot first
                # local vendor="$(cat /sys/bus/pci/devices/${i}/vendor | awk -F 'x' '{print($NF)}')"
                # local device="$(cat /sys/bus/pci/devices/${i}/device | awk -F 'x' '{print($NF)}')"
                # [[ -n "$vendor" && -n "$device" ]] && echo -n "$vendor $device" > /sys/bus/pci/drivers/${drv}/new_id
                echo -n "$i" > /sys/bus/pci/drivers/${drv}/bind
            fi
            rm -f "$binding_data_dir/$i"
        fi
    done
}

function restore_phys_int_dpdk() {
    local pci=$1
    local drv=${2:-${DPDK_UIO_DRIVER}}
    declare phys_int restore_ip_cmd routes
    local binding_data_dir='/var/run/vrouter'
    [ -f "$binding_data_dir/nic" ] && phys_int=$(cat $binding_data_dir/nic)
    local netscript_dir='/etc/sysconfig/network-scripts'
    if [ ! -d "$netscript_dir" ] ; then
        restore_ip_cmd=$(gen_ip_addr_add_cmd vhost0 $phys_int)
        [ -f "$binding_data_dir/${phys_int}_routes" ] && routes=$(cat $binding_data_dir/${phys_int}_routes)
        del_dev_routes vhost0 "$routes"
    fi
    restore_iface_driver $pci $drv
    if [ -n "$phys_int" ] ; then
        restore_phys_int $phys_int "$restore_ip_cmd" "$routes"
        rm -f "$binding_data_dir/${phys_int}"*
    else
        echo "WARNING: there is info about phys_int to restore"
    fi
    rm -f "$binding_data_dir/nic"
}

# ifup interface
#   there are variables from ifcfg-vhost0:
#       DEVICETYPE=vhost
#       TYPE=dpdk
#       BIND_INT=<pci_string>
#       BOND_MODE=<bond_mode>
#       BOND_POLICY=<bond_policy>
#       DRIVER=<dpdk_driver>
#       CPU_LIST=<cpu_list>
#       VLAN_ID=<vlan_id>
function ifup_init_vhost() {
    [ -f ./network-functions-vrouter-${TYPE}-env ] && . ./network-functions-vrouter-${TYPE}-env
    ip addr show dev vhost0 >/dev/null 2>&1 && return 0
    declare phys_int phys_int_mac pci
    IFS=' ' read -r phys_int phys_int_mac pci <<< $(ifcfg_read_phys_int_mac_pci_dpdk)
    [ -z "$pci" ] && { echo "ERROR: BIND_INT in not set in ifcfg-vhost0" && return 1; }
    [ -z "$phys_int" ] && { echo "ERROR: failed to detect ifname by pci $pci" && return 1; }
    [ -z "$phys_int_mac" ] && { echo "ERROR: failed to detect MAC for $phys_int" && return 1; }
    prepare_vif_config $TYPE
    # ifup could be called from host (osp) and container (k8s, hel, etc),
    # in context of host - it should just start container and
    # wait till container creates vhost0
    if [[ -z "$CONTRAIL_DPDK_CONTAINER_CONTEXT" ]] ; then
        start_dpdk_container || return 1
        wait_dpdk_start || return 1
        wait_vhost0 || return 1
    fi
}

# ifdown interface
function ifdown_vhost() {
    [ -n "$CONTRAIL_DPDK_CONTAINER_CONTEXT" ] && {
        echo "ERROR: container context... should not be called from container" && return 1 ; }
    [ -f ./network-functions-vrouter-${TYPE}-env ] && . ./network-functions-vrouter-${TYPE}-env
    remove_docker_container $CONTRAIL_VROUTER_AGENT_CONTAINER_NAME SIGTERM
    remove_docker_container $CONTRAIL_VROUTER_AGENT_DPDK_CONTAINER_NAME SIGTERM
}

function ifdown_vhost_post() {
    [ -n "$CONTRAIL_DPDK_CONTAINER_CONTEXT" ] && {
        echo "ERROR: container context... should not be called from container" && return 1 ; }
    [ -f ./network-functions-vrouter-${TYPE}-env ] && . ./network-functions-vrouter-${TYPE}-env
    local pci=${BIND_INT}
    [ -z "$pci" ] && { echo "ERROR: BIND_INT in not set in ifcfg-vhost0" && return 1; }
    restore_phys_int_dpdk $pci $DRIVER
}